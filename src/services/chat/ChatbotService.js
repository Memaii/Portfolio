import { HuggingFaceAPI } from '../ai/huggingface';
import embeddingService from '../ai/EmbeddingService';
import ContentExtractor from '../content/ContentExtractor';
import securityManager from '../security/SecurityManager';
import SecurityError from '../security/SecurityError';
import { v4 as uuidv4 } from 'uuid';
import { chatConfig } from '../../config/chatConfig';
import PromptManager from '../ai/PromptManager';

/**
 * Types d'erreurs personnalis√©s pour une meilleure gestion
 */
const ErrorTypes = {
  INITIALIZATION: 'INITIALIZATION_ERROR',
  CONTENT: 'CONTENT_ERROR',
  SECURITY: 'SECURITY_ERROR',
  API: 'API_ERROR',
  EMBEDDING: 'EMBEDDING_ERROR'
};

/**
 * ChatbotService - Service principal pour la gestion des interactions du chatbot
 * Impl√©mente le pattern Singleton pour assurer une instance unique
 */
class ChatbotService {
  /**
   * Constructeur - Initialise ou retourne l'instance unique du service
   */
  constructor() {
    if (ChatbotService.instance) {
      return ChatbotService.instance;
    }
    
    // Initialisation des propri√©t√©s
    this.context = '';              // Contexte de conversation actuel
    this.messageHistory = [];       // Historique des messages
    this.userId = this._initUserId(); // ID unique de l'utilisateur
    this.initialized = false;       // √âtat d'initialisation
    this.debug = true;              // Mode debug pour les logs d√©taill√©s
    this.embeddingService = embeddingService; // Utilisation de l'instance existante
    this.huggingFaceAPI = new HuggingFaceAPI();
    
    // Ajout des propri√©t√©s de logging
    this.logs = [];
    this.maxLogs = 100;
    
    ChatbotService.instance = this;
  }

  /**
   * Initialise ou r√©cup√®re l'ID utilisateur depuis le localStorage
   * @returns {string} ID utilisateur unique
   * @private
   */
  _initUserId() {
    const storedId = localStorage.getItem('chat_user_id');
    if (storedId) return storedId;
    
    const newId = uuidv4();
    localStorage.setItem('chat_user_id', newId);
    return newId;
  }

  /**
   * Ajoute un log avec timestamp
   * @param {string} message - Message de log
   * @param {string} level - Niveau de log (info, warn, error)
   * @private
   */
  _addLog(message, level = 'info') {
    const log = {
      timestamp: new Date().toISOString(),
      message,
      level
    };
    
    this.logs.unshift(log);
    if (this.logs.length > this.maxLogs) {
      this.logs.pop();
    }

    if (this.debug) {
      const emoji = level === 'error' ? '‚ùå' : level === 'warn' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
      console.log(`${emoji} ${log.timestamp}: ${message}`);
    }
  }

  /**
   * G√®re une erreur de mani√®re appropri√©e
   * @param {Error} error - Erreur √† g√©rer
   * @param {string} context - Contexte de l'erreur
   * @throws {Error} Erreur enrichie avec contexte
   * @private
   */
  _handleError(error, context) {
    let errorType = ErrorTypes.CONTENT;
    let message = error.message;

    if (error instanceof SecurityError) {
      errorType = ErrorTypes.SECURITY;
    } else if (error.name === 'HuggingFaceAPIError') {
      errorType = ErrorTypes.API;
    }

    const enrichedError = new Error(`[${errorType}] ${context}: ${message}`);
    enrichedError.originalError = error;
    enrichedError.type = errorType;

    this._addLog(`Erreur: ${enrichedError.message}`, 'error');
    throw enrichedError;
  }

  /**
   * Valide le format des donn√©es avant traitement
   * @param {Array} content - Contenu √† valider
   * @returns {boolean} True si les donn√©es sont valides
   * @private
   */
  _validateDataFormat(content) {
    if (!Array.isArray(content)) {
      this._addLog('Le contenu doit √™tre un tableau', 'error');
      return false;
    }

    const isValid = content.every(item => 
      item && typeof item === 'object' && 
      (typeof item.content === 'string' || Array.isArray(item.content))
    );

    if (!isValid) {
      this._addLog('Format de contenu invalide', 'error');
      return false;
    }

    return true;
  }

  /**
   * Traite une question de l'utilisateur et g√©n√®re une r√©ponse appropri√©e
   * @param {string} input - Question de l'utilisateur
   * @param {string} section - Section du site concern√©e ('all' par d√©faut)
   * @returns {Promise<string>} R√©ponse g√©n√©r√©e
   */
  async getResponseFromSection(input, section) {
    try {
      const normalizedSection = this._normalizeSection(section);
      const content = await this._getContentForSection(normalizedSection);
      
      if (!content || !Array.isArray(content)) {
        return "Je ne peux pas acc√©der au contenu de cette section pour le moment.";
      }

      // Utilisation du PromptManager pour l'embedding
      const embeddingPrompt = PromptManager.getEmbeddingPrompt(input, normalizedSection);
      const relevantContext = await this.embeddingService.findMostRelevantContent(
        embeddingPrompt,
        this._formatContentBySection(content, normalizedSection)
      );

      if (!relevantContext || relevantContext.length === 0) {
        return "Je ne trouve pas d'informations pertinentes pour r√©pondre √† votre question.";
      }

      const contextText = this._prepareContext(relevantContext, normalizedSection);
      
      // Utilisation du PromptManager pour la g√©n√©ration
      const response = await this.huggingFaceAPI.queryWithFlanT5(
        input,
        contextText,
        normalizedSection
      );
      
      return response || "Je suis d√©sol√©, je ne parviens pas √† formuler une r√©ponse appropri√©e.";
    } catch (error) {
      console.error('‚ùå Erreur lors du traitement de la requ√™te:', error);
      return "Une erreur s'est produite lors du traitement de votre demande.";
    }
  }

  _prepareContext(relevantContext, section) {
    console.log('\n=== Pr√©paration du contexte ===');
    console.log('üìö Contexte pertinent re√ßu:', relevantContext);
    console.log('üîç Section:', section);

    const contextText = relevantContext
      .map(item => item.content)
      .join('\n\n');

    const sectionIntro = {
      'about': '√Ä propos de moi:',
      'skills': 'Mes comp√©tences techniques:',
      'projects': 'Concernant mes projets:',
      'contact': 'Informations de contact:'
    }[section] || '';

    const finalContext = `${sectionIntro}\n${contextText}`;
    console.log('‚ú® Contexte final pr√©par√©:', finalContext);
    
    return finalContext;
  }

  // M√©thode pour formater le contenu selon le type de section
  _formatContentBySection(content, section) {
    switch (section) {
      case 'skills':
        return content.map(item => {
          if (item.type === 'skill') {
            return {
              content: `${item.name} (Niveau de ma√Ætrise: ${item.displayValue})`,
              type: 'skill',
              section: 'skills'
            };
          }
          return item;
        });
      case 'projects':
        return content.map(item => ({
          content: Array.isArray(item.content) ? item.content.join(' - ') : item.content,
          type: item.type,
          section: 'projects'
        }));
      default:
        return content.map(item => ({
          content: Array.isArray(item.content) ? item.content.join(' ') : item.content,
          type: item.type,
          section
        }));
    }
  }

  // M√©thode pour enrichir le contexte
  _enrichContext(context, section) {
    switch (section) {
      case 'skills':
        return `Mes comp√©tences techniques incluent : ${context}`;
      case 'projects':
        return `Dans mon portfolio de projets : ${context}`;
      default:
        return context;
    }
  }

  // M√©thode pour enrichir la r√©ponse
  async _enrichResponse(initialResponse, context, question) {
    try {
      const enrichmentPrompt = `
        Am√©liore et enrichis cette r√©ponse en la rendant plus naturelle et d√©taill√©e :
        
        R√©ponse initiale: ${initialResponse}
        Contexte additionnel: ${context}
        Question originale: ${question}
        
        Nouvelle r√©ponse:`;

      const enrichedResponse = await this.huggingFaceAPI.query(enrichmentPrompt, context);
      return enrichedResponse || initialResponse;
    } catch (error) {
      console.error('Erreur lors de l\'enrichissement de la r√©ponse:', error);
      return initialResponse;
    }
  }

  /**
   * Normalise et valide la section demand√©e
   * @param {string} section - Section √† normaliser
   * @returns {string} Section normalis√©e
   * @private
   */
  _normalizeSection(section) {
    // Gestion des sections invalides
    if (!section || typeof section !== 'string' || Array.isArray(section)) {
      this._addLog('Section invalide, utilisation de "about"', 'warn');
      return 'about'; // Section par d√©faut
    }

    const normalizedSection = section.toLowerCase().trim();
    
    // V√©rification dans la configuration
    if (!chatConfig.sections[normalizedSection]) {
      this._addLog(`Section "${normalizedSection}" non trouv√©e, utilisation de "about"`, 'warn');
      return 'about';
    }

    return normalizedSection;
  }

  /**
   * R√©cup√®re le contenu structur√© pour une section donn√©e
   * @param {string} section - Section √† r√©cup√©rer
   * @returns {Promise<Array>} Contenu structur√©
   * @private
   */
  async _getContentForSection(section) {
    try {
      const content = ContentExtractor.extractSectionContent(section);
      if (!content) {
        console.log('‚ùå Pas de contenu trouv√© pour la section:', section);
        return null;
      }

      let parsedContent;
      try {
        parsedContent = JSON.parse(content);
        console.log('üìö Contenu structur√© de la section:', parsedContent);
      } catch (error) {
        console.error('‚ùå Erreur de parsing du contenu:', error);
        return null;
      }

      return Array.isArray(parsedContent) ? parsedContent : [parsedContent];

    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du contenu:', error);
      return null;
    }
  }

  /**
   * Formate le contexte pour le mod√®le
   * @param {Array} context - Contexte √† formater
   * @returns {string} Contexte format√©
   * @private
   */
  _formatContextForModel(context) {
    return context.map(c => c.content).join(' ');
  }

  /**
   * Ajoute un message √† l'historique
   * @param {string} message - Message √† ajouter
   * @param {boolean} isUser - Indique si le message vient de l'utilisateur
   */
  addToMessageHistory(message, isUser = true) {
    const newMessage = {
      content: message,
      isUser,
      timestamp: new Date().toISOString()
    };
    this.messageHistory.push(newMessage);
    console.log('üìù Historique mis √† jour:', this.messageHistory);
  }

  /**
   * R√©cup√®re les logs r√©cents
   * @param {number} limit - Nombre de logs √† r√©cup√©rer
   * @returns {Array} Logs r√©cents
   */
  getLogs(limit = 10) {
    return this.logs.slice(0, limit);
  }

  /**
   * Efface les logs
   */
  clearLogs() {
    this.logs = [];
    this._addLog('Logs effac√©s');
  }

  /**
   * Recherche par mots-cl√©s (m√©thode de secours)
   * @param {string} input - Question de l'utilisateur
   * @param {Array} content - Contenu √† rechercher
   * @returns {Array} Contenu pertinent trouv√©
   * @private
   */
  _fallbackKeywordSearch(input, content) {
    this._addLog('Utilisation de la recherche par mots-cl√©s', 'info');
    
    // Pr√©paration des mots-cl√©s
    const keywords = input.toLowerCase()
      .split(/\s+/)
      .filter(word => word.length > 2);  // Ignorer les mots trop courts

    if (keywords.length === 0) {
      return [];
    }

    // Score et tri du contenu
    const scoredContent = content.map(item => {
      const itemContent = typeof item.content === 'string' 
        ? item.content.toLowerCase()
        : item.content.join(' ').toLowerCase();

      const score = keywords.reduce((acc, keyword) => {
        return acc + (itemContent.includes(keyword) ? 1 : 0);
      }, 0);

      return { ...item, score };
    });

    // Retourner les √©l√©ments les plus pertinents
    return scoredContent
      .filter(item => item.score > 0)
      .sort((a, b) => b.score - a.score)
      .slice(0, 3)
      .map(({ score, ...item }) => item);
  }

  /**
   * Traite la requ√™te de l'utilisateur et g√©n√®re une r√©ponse
   * @param {string} userInput - La question pos√©e par l'utilisateur
   * @param {string} section - La section cibl√©e (optionnelle)
   * @returns {Promise<string>} - La r√©ponse g√©n√©r√©e
   */
  async getResponse(userInput, section = null) {
    try {
      if (section) {
        return await this.getResponseFromSection(userInput, section);
      }

      const relevantContent = await this.embeddingService.findMostRelevantContent(
        userInput,
        chatConfig.contentArray
      );

      if (relevantContent.length === 0) {
        return 'D√©sol√©, je n\'ai pas trouv√© d\'information pertinente.';
      }

      const context = this._prepareContext(relevantContent, 'general');
      const response = await this.huggingFaceAPI.queryWithFlanT5(
        userInput,
        context,
        'general'
      );

      const conversationId = uuidv4();
      await this.updateConversationHistory(conversationId, userInput, response);

      return response;
    } catch (error) {
      if (error instanceof SecurityError) throw error;
      return 'Une erreur est survenue lors du traitement de votre demande.';
    }
  }
}

export default new ChatbotService(); 